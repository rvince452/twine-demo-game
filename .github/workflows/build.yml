name: Build Twine Game

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download and setup Tweego
      run: |
        # Download Tweego zip file
        wget -q https://github.com/tmedwards/tweego/releases/download/v2.1.1/tweego-2.1.1-linux-x64.zip
        echo "Downloaded zip file"
        
        # Extract and list contents to see structure
        unzip -q tweego-2.1.1-linux-x64.zip
        echo "Archive contents:"
        ls -la
        
        # Find all tweego executables and make them executable
        find . -name "tweego" -type f -exec chmod +x {} \;
        
        # Find the tweego executable path and move it to a standard location
        TWEEGO_PATH=$(find . -name "tweego" -type f | head -1)
        echo "Found tweego at: $TWEEGO_PATH"
        
        # Copy tweego to /usr/local/bin so it's available in PATH
        sudo cp "$TWEEGO_PATH" /usr/local/bin/tweego
        
        # Verify tweego works from PATH
        tweego --version || echo "Version command completed"
        echo "Tweego setup completed successfully"
        
    - name: Create build directory
      run: mkdir -p build
      
    - name: Build game with Tweego
      run: |
        # Use tweego from PATH
        echo "Using tweego from PATH"
        tweego --version || echo "Version check completed"
        
        # Check passages directory contents
        echo "Passages directory contents:"
        ls -la passages/
        
        # Check img directory contents
        echo "Images directory contents:"
        ls -la img/ || echo "No img directory found"
        
        # Check twee file contents briefly
        echo "Checking twee files:"
        for file in passages/*.twee; do
          echo "=== $file ==="
          head -5 "$file"
        done
        
        echo "Running tweego build..."
        
        # Try building with all directories including images
        echo "Attempting: tweego -o build/game.html passages/ scripts/ styles/ img/"
        if tweego -o build/game.html passages/ scripts/ styles/ img/; then
          echo "✅ Build completed successfully with all directories"
          echo "Output file info:"
          ls -la build/game.html
          echo "File size: $(stat -c%s build/game.html) bytes"
        else
          echo "❌ First attempt failed, trying without img folder..."
          echo "Attempting: tweego -o build/game.html passages/ scripts/ styles/"
          if tweego -o build/game.html passages/ scripts/ styles/; then
            echo "✅ Build completed successfully without img folder"
            echo "Output file info:"
            ls -la build/game.html
          else
            echo "❌ Second attempt failed, trying with passages only..."
            echo "Attempting: tweego -o build/game.html passages/"
            if tweego -o build/game.html passages/; then
              echo "✅ Build completed successfully with passages only"
              echo "Output file info:"
              ls -la build/game.html
            else
              echo "❌ All build attempts failed"
              echo "Final attempt for error diagnosis:"
              echo "Command: tweego -o build/game.html passages/"
              tweego -o build/game.html passages/ || true
              exit 1
            fi
          fi
        fi
        
    - name: List build contents
      run: ls -la build/
      
    - name: Upload game artifact
      uses: actions/upload-artifact@v4
      with:
        name: twine-game
        path: build/game.html
        
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
      with:
        enablement: true
      
    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./build
        
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4